{"ast":null,"code":"var _jsxFileName = \"/Users/mayankkhanna/Documents/miru-web/app/javascript/src/components/time-tracking/WeeklyEntries.tsx\",\n    _this = this;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar logger = require(\"js-logger\").get(\"@saeloun/miru-web:javascript:src:components:time-tracking:WeeklyEntries.tsx\");\n\nimport * as React from \"react\";\nimport timesheetEntryApi from \"apis/timesheet-entry\";\nimport Toastr from \"common/Toastr\";\nimport SelectProject from \"./SelectProject\";\nimport WeeklyEntriesCard from \"./WeeklyEntriesCard\";\nvar useState = React.useState,\n    useEffect = React.useEffect;\n\nvar WeeklyEntries = function WeeklyEntries(_ref) {\n  var clients = _ref.clients,\n      projects = _ref.projects,\n      newRowView = _ref.newRowView,\n      setNewRowView = _ref.setNewRowView,\n      projectId = _ref.projectId,\n      clientName = _ref.clientName,\n      projectName = _ref.projectName,\n      entries = _ref.entries,\n      entryList = _ref.entryList,\n      setEntryList = _ref.setEntryList,\n      dayInfo = _ref.dayInfo,\n      isWeeklyEditing = _ref.isWeeklyEditing,\n      setIsWeeklyEditing = _ref.setIsWeeklyEditing,\n      weeklyData = _ref.weeklyData,\n      setWeeklyData = _ref.setWeeklyData,\n      selectedEmployeeId = _ref.selectedEmployeeId;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      project = _useState4[0],\n      setProject = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      projectSelected = _useState6[0],\n      setProjectSelected = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentEntries = _useState8[0],\n      setCurrentEntries = _useState8[1];\n\n  var _useState9 = useState(-1),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentProjectId = _useState10[0],\n      setCurrentProjectId = _useState10[1];\n\n  var setProjectId = function setProjectId() {\n    var pid = projects[client].find(function (p) {\n      return p.name === project;\n    }).id;\n    setCurrentProjectId(pid);\n    return pid;\n  };\n\n  var getIds = function getIds() {\n    var ids = [];\n    currentEntries.forEach(function (entry) {\n      if (entry) ids.push(entry[\"id\"]);\n    });\n    return ids;\n  };\n\n  var handleEditEntries = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var ids, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              ids = getIds();\n              _context.next = 4;\n              return timesheetEntryApi.updateBulk({\n                project_id: setProjectId(),\n                ids: ids\n              });\n\n            case 4:\n              res = _context.sent;\n\n              if (res.status === 200) {\n                setEntryList(function (prevState) {\n                  var newState = _objectSpread(_objectSpread({}, prevState), res.data.entries);\n\n                  return newState;\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              Toastr.error(_context.t0.message);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function handleEditEntries() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // const handleDeleteEntries = async () => {\n  //   try {\n  //     if (!currentEntries.length) return;\n  //     const ids = getIds();\n  //     const delRes = await timesheetEntryApi.destroyBulk({ ids: ids });\n  //     if (delRes.status === 200) {\n  //       const getRes = await timesheetEntryApi.list(dayInfo[0][\"fullDate\"], dayInfo[6][\"fullDate\"]);\n  //       if (getRes.status === 200) {\n  //         const newState = { ...entryList, ...getRes.data.entries };\n  //         setEntryList(newState);\n  //       }\n  //     }\n  //   } catch (error) {\n  //     Logger.error(error.message);\n  //   }\n  // };\n\n\n  var handleSetData = function handleSetData() {\n    if (projectId) {\n      setCurrentProjectId(projectId);\n      setProject(projectName);\n      setClient(clientName);\n      setProjectSelected(true);\n      setCurrentEntries(entries);\n    }\n  };\n\n  useEffect(function () {\n    handleSetData();\n  }, []);\n  return projectSelected ? /*#__PURE__*/React.createElement(WeeklyEntriesCard, {\n    client: client,\n    project: project,\n    currentEntries: currentEntries,\n    setCurrentEntries: setCurrentEntries,\n    currentProjectId: currentProjectId,\n    setProjectSelected: setProjectSelected,\n    projectSelected: projectSelected,\n    newRowView: newRowView,\n    setNewRowView: setNewRowView,\n    setEntryList: setEntryList // handleDeleteEntries={handleDeleteEntries}\n    ,\n    handleEditEntries: handleEditEntries,\n    dayInfo: dayInfo,\n    isWeeklyEditing: isWeeklyEditing,\n    setIsWeeklyEditing: setIsWeeklyEditing,\n    weeklyData: weeklyData,\n    setWeeklyData: setWeeklyData,\n    selectedEmployeeId: selectedEmployeeId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(SelectProject, {\n    clients: clients,\n    client: client,\n    setClient: setClient,\n    clientName: clientName,\n    projects: projects,\n    project: project,\n    setProject: setProject,\n    projectName: projectName,\n    projectId: projectId,\n    setProjectId: setProjectId,\n    projectSelected: projectSelected,\n    setProjectSelected: setProjectSelected,\n    newRowView: newRowView,\n    setNewRowView: setNewRowView,\n    handleEditEntries: handleEditEntries,\n    isWeeklyEditing: isWeeklyEditing,\n    setIsWeeklyEditing: setIsWeeklyEditing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default WeeklyEntries;","map":{"version":3,"sources":["/Users/mayankkhanna/Documents/miru-web/app/javascript/src/components/time-tracking/WeeklyEntries.tsx"],"names":["React","timesheetEntryApi","Toastr","SelectProject","WeeklyEntriesCard","useState","useEffect","WeeklyEntries","clients","projects","newRowView","setNewRowView","projectId","clientName","projectName","entries","entryList","setEntryList","dayInfo","isWeeklyEditing","setIsWeeklyEditing","weeklyData","setWeeklyData","selectedEmployeeId","client","setClient","project","setProject","projectSelected","setProjectSelected","currentEntries","setCurrentEntries","currentProjectId","setCurrentProjectId","setProjectId","pid","find","p","name","id","getIds","ids","forEach","entry","push","handleEditEntries","updateBulk","project_id","res","status","prevState","newState","data","error","message","handleSetData"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport timesheetEntryApi from \"apis/timesheet-entry\";\nimport Toastr from \"common/Toastr\";\nimport SelectProject from \"./SelectProject\";\nimport WeeklyEntriesCard from \"./WeeklyEntriesCard\";\n\nconst { useState, useEffect } = React;\n\nconst WeeklyEntries: React.FC<Props> = ({\n  clients,\n  projects,\n  newRowView,\n  setNewRowView,\n  projectId,\n  clientName,\n  projectName,\n  entries,\n  entryList, //eslint-disable-line\n  setEntryList,\n  dayInfo,\n  isWeeklyEditing,\n  setIsWeeklyEditing,\n  weeklyData,\n  setWeeklyData,\n  selectedEmployeeId\n\n}) => {\n  const [client, setClient] = useState(\"\");\n  const [project, setProject] = useState(\"\");\n  const [projectSelected, setProjectSelected] = useState(false);\n  const [currentEntries, setCurrentEntries] = useState([]);\n  const [currentProjectId, setCurrentProjectId] = useState(-1);\n\n  const setProjectId = () => {\n    const pid = projects[client].find(p => p.name === project).id;\n    setCurrentProjectId(pid);\n    return pid;\n  };\n\n  const getIds = () => {\n    const ids = [];\n    currentEntries.forEach(entry => {\n      if (entry) ids.push(entry[\"id\"]);\n    });\n    return ids;\n  };\n\n  const handleEditEntries = async () => {\n    try {\n      const ids = getIds();\n      const res = await timesheetEntryApi.updateBulk({\n        project_id: setProjectId(),\n        ids: ids\n      });\n      if (res.status === 200) {\n        setEntryList(prevState => {\n          const newState = { ...prevState, ...res.data.entries };\n          return newState;\n        });\n      }\n    } catch (error) {\n      Toastr.error(error.message);\n    }\n  };\n\n  // const handleDeleteEntries = async () => {\n  //   try {\n  //     if (!currentEntries.length) return;\n  //     const ids = getIds();\n  //     const delRes = await timesheetEntryApi.destroyBulk({ ids: ids });\n  //     if (delRes.status === 200) {\n  //       const getRes = await timesheetEntryApi.list(dayInfo[0][\"fullDate\"], dayInfo[6][\"fullDate\"]);\n  //       if (getRes.status === 200) {\n  //         const newState = { ...entryList, ...getRes.data.entries };\n  //         setEntryList(newState);\n  //       }\n  //     }\n  //   } catch (error) {\n  //     Logger.error(error.message);\n  //   }\n  // };\n\n  const handleSetData = () => {\n    if (projectId) {\n      setCurrentProjectId(projectId);\n      setProject(projectName);\n      setClient(clientName);\n      setProjectSelected(true);\n      setCurrentEntries(entries);\n    }\n  };\n\n  useEffect(() => {\n    handleSetData();\n  }, []);\n\n  return projectSelected ?\n    <WeeklyEntriesCard\n      client={client}\n      project={project}\n      currentEntries={currentEntries}\n      setCurrentEntries={setCurrentEntries}\n      currentProjectId={currentProjectId}\n      setProjectSelected={setProjectSelected}\n      projectSelected={projectSelected}\n      newRowView={newRowView}\n      setNewRowView={setNewRowView}\n      setEntryList={setEntryList}\n      // handleDeleteEntries={handleDeleteEntries}\n      handleEditEntries={handleEditEntries}\n      dayInfo={dayInfo}\n      isWeeklyEditing={isWeeklyEditing}\n      setIsWeeklyEditing={setIsWeeklyEditing}\n      weeklyData={weeklyData}\n      setWeeklyData={setWeeklyData}\n      selectedEmployeeId={selectedEmployeeId}\n\n    />\n    : <SelectProject\n      clients={clients}\n      client={client}\n      setClient={setClient}\n      clientName={clientName}\n      projects={projects}\n      project={project}\n      setProject={setProject}\n      projectName={projectName}\n      projectId={projectId}\n      setProjectId={setProjectId}\n      projectSelected={projectSelected}\n      setProjectSelected={setProjectSelected}\n      newRowView={newRowView}\n      setNewRowView={setNewRowView}\n      handleEditEntries={handleEditEntries}\n      isWeeklyEditing={isWeeklyEditing}\n      setIsWeeklyEditing={setIsWeeklyEditing}\n    />;\n};\n\ninterface Props {\n  key: number;\n  clients: [];\n  selectedEmployeeId: number;\n  projects: object;\n  newRowView: boolean;\n  setNewRowView: React.Dispatch<React.SetStateAction<boolean>>;\n  projectId: number;\n  clientName: string;\n  projectName: string;\n  entries: [];\n  entryList: object;\n  setEntryList: React.Dispatch<React.SetStateAction<[]>>;\n  dayInfo: Array<any>;\n  isWeeklyEditing: boolean;\n  setIsWeeklyEditing: React.Dispatch<React.SetStateAction<boolean>>;\n  weeklyData: any[];\n  setWeeklyData: React.Dispatch<React.SetStateAction<any[]>>;\n  parseWeeklyViewData: () => void;\n}\n\nexport default WeeklyEntries;\n"]},"metadata":{},"sourceType":"module"}