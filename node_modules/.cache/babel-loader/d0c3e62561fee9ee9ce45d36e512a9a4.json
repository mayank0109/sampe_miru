{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction isValidVersion(required, current) {\n  var requiredArray = required.split('.');\n  var currentArray = current.split('.');\n\n  for (var i = 0; i < requiredArray.length; i++) {\n    if (currentArray[i] && currentArray[i] > requiredArray[i]) {\n      return true;\n    }\n  }\n\n  return currentArray[requiredArray.length - 1] === requiredArray[requiredArray.length - 1];\n}\n\nfunction dispatch(el, name) {\n  var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  el.dispatchEvent(new CustomEvent(name, {\n    detail: detail,\n    bubbles: true,\n    composed: true,\n    cancelable: true\n  }));\n}\n\nvar Bridge = /*#__PURE__*/function () {\n  function Bridge() {\n    _classCallCheck(this, Bridge);\n  }\n\n  _createClass(Bridge, [{\n    key: \"init\",\n    value: function init() {\n      if (!window.Alpine.version || !isValidVersion('3.0.0', window.Alpine.version)) {\n        throw new Error('Invalid Alpine version. Please use Alpine 3.0.0 or above');\n      } // Tag all cloaked elements on first page load.\n\n\n      window.Alpine.mutateDom(function () {\n        document.body.querySelectorAll('[x-cloak]').forEach(function (el) {\n          var _el$getAttribute;\n\n          el.setAttribute('data-alpine-was-cloaked', (_el$getAttribute = el.getAttribute('x-cloak')) !== null && _el$getAttribute !== void 0 ? _el$getAttribute : '');\n        });\n      });\n      this.configureEventHandlers();\n    }\n  }, {\n    key: \"configureEventHandlers\",\n    value: function configureEventHandlers() {\n      var renderCallback = function renderCallback(event) {\n        if (document.documentElement.hasAttribute('data-turbo-preview')) {\n          return;\n        }\n\n        dispatch(document, 'alpine:init');\n        dispatch(document, 'alpine:initializing');\n        window.Alpine.flushAndStopDeferringMutations();\n        dispatch(document, 'alpine:initialised');\n        window.Alpine.mutateDom(function () {\n          document.querySelectorAll('[data-alpine-ignored]').forEach(function (el) {\n            el.removeAttribute('x-ignore');\n            el.removeAttribute('data-alpine-ignored');\n          });\n        });\n      };\n\n      var beforeRenderCallback = function beforeRenderCallback(event) {\n        window.Alpine.mutateDom(function () {\n          if (document.documentElement.hasAttribute('data-turbo-preview')) {\n            return;\n          }\n\n          event.detail.newBody.querySelectorAll('[data-alpine-generated-me],[x-cloak]').forEach(function (el) {\n            if (el.hasAttribute('x-cloak')) {\n              var _el$getAttribute2;\n\n              el.setAttribute('data-alpine-was-cloaked', (_el$getAttribute2 = el.getAttribute('x-cloak')) !== null && _el$getAttribute2 !== void 0 ? _el$getAttribute2 : '');\n            }\n\n            if (el.hasAttribute('data-alpine-generated-me')) {\n              el.removeAttribute('data-alpine-generated-me');\n              el.remove();\n            }\n          });\n        });\n        window.Alpine.deferMutations();\n      };\n\n      var beforeCacheCallback = function beforeCacheCallback(event) {\n        window.Alpine.mutateDom(function () {\n          document.body.querySelectorAll('[x-for],[x-if],[data-alpine-was-cloaked]').forEach(function (el) {\n            if (el.hasAttribute('data-alpine-was-cloaked')) {\n              var _el$getAttribute3;\n\n              el.setAttribute('x-cloak', (_el$getAttribute3 = el.getAttribute('data-alpine-was-cloaked')) !== null && _el$getAttribute3 !== void 0 ? _el$getAttribute3 : '');\n              el.removeAttribute('data-alpine-was-cloaked');\n            }\n\n            if (el.hasAttribute('x-for') && el._x_lookup) {\n              Object.values(el._x_lookup).forEach(function (el) {\n                return el.setAttribute('data-alpine-generated-me', true);\n              });\n            }\n\n            if (el.hasAttribute('x-if') && el._x_currentIfEl) {\n              el._x_currentIfEl.setAttribute('data-alpine-generated-me', true);\n            }\n          });\n        });\n        document.querySelectorAll('[data-turbo-permanent]').forEach(function (el) {\n          window.Alpine.mutateDom(function () {\n            if (!el.hasAttribute('x-ignore')) {\n              el.setAttribute('x-ignore', true);\n              el.setAttribute('data-alpine-ignored', true);\n            }\n\n            el.querySelectorAll('[data-alpine-generated-me]').forEach(function (sub) {\n              sub.removeAttribute('data-alpine-generated-me');\n            });\n          });\n        });\n      };\n\n      document.addEventListener('turbo:render', renderCallback);\n      document.addEventListener('turbo:before-render', beforeRenderCallback);\n      document.addEventListener('turbo:before-cache', beforeCacheCallback);\n    }\n  }]);\n\n  return Bridge;\n}();\n\nif (window.Alpine) {\n  console.error('Alpine-turbo-drive-adapter must be included before AlpineJs');\n} // Polyfill for legacy browsers\n\n\nif (!Object.getOwnPropertyDescriptor(NodeList.prototype, 'forEach')) {\n  Object.defineProperty(NodeList.prototype, 'forEach', Object.getOwnPropertyDescriptor(Array.prototype, 'forEach'));\n}\n\ndocument.addEventListener('alpine:init', function () {\n  var bridge = new Bridge();\n  bridge.init();\n}, {\n  once: true\n});","map":null,"metadata":{},"sourceType":"module"}