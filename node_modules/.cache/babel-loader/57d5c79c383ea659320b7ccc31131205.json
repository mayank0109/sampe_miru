{"ast":null,"code":"var _jsxFileName = \"/app/app/javascript/src/components/Reports/Header/NavigationFilter.tsx\",\n    _this = this;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar logger = require(\"js-logger\").get(\"@saeloun/miru-web:javascript:src:components:Reports:Header:NavigationFilter.tsx\");\n\nimport React, { Fragment } from \"react\";\nimport { X } from \"phosphor-react\";\nimport { useEntry } from \"../context/EntryContext\";\n\nvar NavigationFilter = function NavigationFilter() {\n  var _useEntry = useEntry(),\n      selectedFilter = _useEntry.selectedFilter,\n      handleRemoveSingleFilter = _useEntry.handleRemoveSingleFilter;\n\n  var filterHtml = function filterHtml(value, key, filterKey) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: key,\n      className: \"flex px-2 mr-4 py-1 rounded-xl tracking-widest font-semibold px-1 text-xs tracking-widest bg-miru-gray-400 text-miru-dark-purple-1000\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    }, value), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return handleRemoveSingleFilter(filterKey, value);\n      },\n      className: \"inline-block ml-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(X, {\n      size: 11,\n      color: \"#1D1A31\",\n      className: \"inline-block\",\n      weight: \"bold\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  var getFilterValues = function getFilterValues() {\n    var filterOptions = [];\n\n    var _loop = function _loop(filterKey) {\n      var filterValue = selectedFilter[filterKey];\n\n      if (Array.isArray(filterValue)) {\n        filterOptions = [].concat(_toConsumableArray(filterOptions), [filterValue.map(function (item, index) {\n          return filterHtml(item.label, \"\".concat(item, \"-\").concat(index), filterKey);\n        })]);\n      } else if (filterValue.value !== \"\") {\n        filterOptions = [].concat(_toConsumableArray(filterOptions), [filterHtml(filterValue.label, filterKey, filterKey)]);\n      }\n    };\n\n    for (var filterKey in selectedFilter) {\n      _loop(filterKey);\n    }\n\n    return filterOptions;\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, getFilterValues());\n};\n\nexport default NavigationFilter;","map":{"version":3,"sources":["/app/app/javascript/src/components/Reports/Header/NavigationFilter.tsx"],"names":["React","Fragment","X","useEntry","NavigationFilter","selectedFilter","handleRemoveSingleFilter","filterHtml","value","key","filterKey","getFilterValues","filterOptions","filterValue","Array","isArray","map","item","index","label"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,CAAT,QAAkB,gBAAlB;AACA,SAASC,QAAT,QAAyB,yBAAzB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,kBAAqDD,QAAQ,EAA7D;AAAA,MAAQE,cAAR,aAAQA,cAAR;AAAA,MAAwBC,wBAAxB,aAAwBA,wBAAxB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,GAAR,EAAaC,SAAb;AAAA,wBACjB;AAAI,MAAA,GAAG,EAAED,GAAT;AAAc,MAAA,SAAS,EAAC,uIAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,KAAP,CADF,eAEE;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMF,wBAAwB,CAACI,SAAD,EAAYF,KAAZ,CAA9B;AAAA,OAAjB;AAAmE,MAAA,SAAS,EAAC,mBAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,CAAD;AAAG,MAAA,IAAI,EAAE,EAAT;AAAa,MAAA,KAAK,EAAC,SAAnB;AAA6B,MAAA,SAAS,EAAC,cAAvC;AAAsD,MAAA,MAAM,EAAC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CADiB;AAAA,GAAnB;;AASA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,QAAIC,aAAa,GAAG,EAApB;;AAD4B,+BAEjBF,SAFiB;AAG1B,UAAMG,WAAW,GAAGR,cAAc,CAACK,SAAD,CAAlC;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9BD,QAAAA,aAAa,gCAAOA,aAAP,IAAsBC,WAAW,CAACG,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP;AAAA,iBAAiBX,UAAU,CAACU,IAAI,CAACE,KAAN,YAAgBF,IAAhB,cAAwBC,KAAxB,GAAiCR,SAAjC,CAA3B;AAAA,SAAhB,CAAtB,EAAb;AACD,OAFD,MAGK,IAAIG,WAAW,CAACL,KAAZ,KAAsB,EAA1B,EAA8B;AACjCI,QAAAA,aAAa,gCAAOA,aAAP,IAAsBL,UAAU,CAACM,WAAW,CAACM,KAAb,EAAoBT,SAApB,EAA+BA,SAA/B,CAAhC,EAAb;AACD;AATyB;;AAE5B,SAAK,IAAMA,SAAX,IAAwBL,cAAxB,EAAwC;AAAA,YAA7BK,SAA6B;AAQvC;;AACD,WAAOE,aAAP;AACD,GAZD;;AAcA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,eAAe,EADlB,CADF;AAKD,CA/BD;;AAgCA,eAAeP,gBAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport { X } from \"phosphor-react\";\nimport { useEntry } from \"../context/EntryContext\";\n\nconst NavigationFilter = () => {\n  const { selectedFilter, handleRemoveSingleFilter } = useEntry();\n\n  const filterHtml = (value, key, filterKey) => (\n    <li key={key} className=\"flex px-2 mr-4 py-1 rounded-xl tracking-widest font-semibold px-1 text-xs tracking-widest bg-miru-gray-400 text-miru-dark-purple-1000\">\n      <span>{value}</span>\n      <button onClick={() => handleRemoveSingleFilter(filterKey, value)} className=\"inline-block ml-1\">\n        <X size={11} color=\"#1D1A31\" className=\"inline-block\" weight=\"bold\" />\n      </button>\n    </li>\n  );\n\n  const getFilterValues = () => {\n    let filterOptions = [];\n    for (const filterKey in selectedFilter) {\n      const filterValue = selectedFilter[filterKey];\n      if (Array.isArray(filterValue)) {\n        filterOptions = [...filterOptions, filterValue.map((item, index) => filterHtml(item.label, `${item}-${index}`, filterKey))];\n      }\n      else if (filterValue.value !== \"\") {\n        filterOptions = [...filterOptions, filterHtml(filterValue.label, filterKey, filterKey)];\n      }\n    }\n    return filterOptions;\n  };\n\n  return (\n    <Fragment>\n      {getFilterValues()}\n    </Fragment>\n  );\n};\nexport default NavigationFilter;\n"]},"metadata":{},"sourceType":"module"}