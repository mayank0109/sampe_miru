{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar logger = require(\"js-logger\").get(\"@saeloun/miru-web:javascript:src:components:Reports:api:applyFilter.ts\");\n\nimport reports from \"apis/reports\";\n\nvar isValuePresent = function isValuePresent(filterValue) {\n  return filterValue.value && filterValue.value !== \"\";\n};\n\nvar isNotEmptyArray = function isNotEmptyArray(value) {\n  return value && value.length > 0;\n};\n\nvar apiKeys = {\n  clients: \"client\",\n  dateRange: \"date_range\",\n  groupBy: \"groupBy\",\n  status: \"status\",\n  teamMember: \"team_member\"\n};\n\nvar getQueryParams = function getQueryParams(selectedFilter) {\n  var params = \"\";\n\n  var _loop = function _loop(filterKey) {\n    var filterValue = selectedFilter[filterKey];\n\n    if (Array.isArray(filterValue) && isNotEmptyArray(filterValue)) {\n      filterValue.forEach(function (item) {\n        params += \"&\".concat(apiKeys[filterKey], \"[]=\").concat(item.value);\n      });\n    }\n\n    if (!Array.isArray(filterValue) && isValuePresent(filterValue)) {\n      params += \"&\".concat(apiKeys[filterKey], \"=\").concat(filterValue.value);\n    }\n  };\n\n  for (var filterKey in selectedFilter) {\n    _loop(filterKey);\n  }\n\n  return params;\n};\n\nvar applyFilter = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(selectedFilter, setTimeEntries, setNavFilters, setFilterVisibilty) {\n    var queryParams, sanitizedParam, sanitizedQuery, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            queryParams = getQueryParams(selectedFilter);\n            sanitizedParam = queryParams.substring(1);\n            sanitizedQuery = \"?\".concat(sanitizedParam);\n            _context.next = 5;\n            return reports.get(sanitizedQuery);\n\n          case 5:\n            res = _context.sent;\n            setTimeEntries(res.data.entries);\n            setNavFilters(true);\n            setFilterVisibilty(false);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function applyFilter(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default applyFilter;","map":{"version":3,"sources":["/app/app/javascript/src/components/Reports/api/applyFilter.ts"],"names":["reports","isValuePresent","filterValue","value","isNotEmptyArray","length","apiKeys","clients","dateRange","groupBy","status","teamMember","getQueryParams","selectedFilter","params","filterKey","Array","isArray","forEach","item","applyFilter","setTimeEntries","setNavFilters","setFilterVisibilty","queryParams","sanitizedParam","substring","sanitizedQuery","get","res","data","entries"],"mappings":";;;;;;;;AAAA,OAAOA,OAAP,MAAoB,cAApB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD;AAAA,SAAiBA,WAAW,CAACC,KAAZ,IAAqBD,WAAW,CAACC,KAAZ,KAAsB,EAA5D;AAAA,CAAvB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACD,KAAD;AAAA,SAAWA,KAAK,IAAIA,KAAK,CAACE,MAAN,GAAe,CAAnC;AAAA,CAAxB;;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAE,QADK;AAEdC,EAAAA,SAAS,EAAE,YAFG;AAGdC,EAAAA,OAAO,EAAE,SAHK;AAIdC,EAAAA,MAAM,EAAE,QAJM;AAKdC,EAAAA,UAAU,EAAE;AALE,CAAhB;;AAQA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,cAAD,EAAoB;AACzC,MAAIC,MAAM,GAAG,EAAb;;AADyC,6BAE9BC,SAF8B;AAGvC,QAAMb,WAAW,GAAGW,cAAc,CAACE,SAAD,CAAlC;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcf,WAAd,KAA8BE,eAAe,CAACF,WAAD,CAAjD,EAAgE;AAC9DA,MAAAA,WAAW,CAACgB,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1BL,QAAAA,MAAM,eAAQR,OAAO,CAACS,SAAD,CAAf,gBAAgCI,IAAI,CAAChB,KAArC,CAAN;AACD,OAFD;AAGD;;AACD,QAAI,CAACa,KAAK,CAACC,OAAN,CAAcf,WAAd,CAAD,IAA+BD,cAAc,CAACC,WAAD,CAAjD,EAAgE;AAC9DY,MAAAA,MAAM,eAAQR,OAAO,CAACS,SAAD,CAAf,cAA8Bb,WAAW,CAACC,KAA1C,CAAN;AACD;AAXsC;;AAEzC,OAAK,IAAMY,SAAX,IAAwBF,cAAxB,EAAwC;AAAA,UAA7BE,SAA6B;AAUvC;;AACD,SAAOD,MAAP;AACD,CAdD;;AAgBA,IAAMM,WAAW;AAAA,sEAAG,iBAAOP,cAAP,EAAuBQ,cAAvB,EAAuCC,aAAvC,EAAsDC,kBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,WADY,GACEZ,cAAc,CAACC,cAAD,CADhB;AAEZY,YAAAA,cAFY,GAEKD,WAAW,CAACE,SAAZ,CAAsB,CAAtB,CAFL;AAGZC,YAAAA,cAHY,cAGSF,cAHT;AAAA;AAAA,mBAIAzB,OAAO,CAAC4B,GAAR,CAAYD,cAAZ,CAJA;;AAAA;AAIZE,YAAAA,GAJY;AAKlBR,YAAAA,cAAc,CAACQ,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAd;AACAT,YAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,YAAAA,kBAAkB,CAAC,KAAD,CAAlB;;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXH,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAUA,eAAeA,WAAf","sourcesContent":["import reports from \"apis/reports\";\n\nconst isValuePresent = (filterValue) => filterValue.value && filterValue.value !== \"\";\nconst isNotEmptyArray = (value) => value && value.length > 0;\n\nconst apiKeys = {\n  clients: \"client\",\n  dateRange: \"date_range\",\n  groupBy: \"groupBy\",\n  status: \"status\",\n  teamMember: \"team_member\"\n};\n\nconst getQueryParams = (selectedFilter) => {\n  let params = \"\";\n  for (const filterKey in selectedFilter) {\n    const filterValue = selectedFilter[filterKey];\n    if (Array.isArray(filterValue) && isNotEmptyArray(filterValue)) {\n      filterValue.forEach(item => {\n        params += `&${apiKeys[filterKey]}[]=${item.value}`;\n      });\n    }\n    if (!Array.isArray(filterValue) && isValuePresent(filterValue)) {\n      params += `&${apiKeys[filterKey]}=${filterValue.value}`;\n    }\n  }\n  return params;\n};\n\nconst applyFilter = async (selectedFilter, setTimeEntries, setNavFilters, setFilterVisibilty) => {\n  const queryParams = getQueryParams(selectedFilter);\n  const sanitizedParam = queryParams.substring(1);\n  const sanitizedQuery = `?${sanitizedParam}`;\n  const res = await reports.get(sanitizedQuery);\n  setTimeEntries(res.data.entries);\n  setNavFilters(true);\n  setFilterVisibilty(false);\n};\n\nexport default applyFilter;\n"]},"metadata":{},"sourceType":"module"}